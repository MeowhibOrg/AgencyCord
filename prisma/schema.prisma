// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  image         String?
  accounts      Account[]
  emailVerified Boolean?  @default(false)
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Employee {
  id                  String               @id @default(cuid())
  name                String
  githubUsername      String
  discordUsername     String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  timeEntries         TimeEntry[]
  commits             Commit[]
  pullRequestComments PullRequestComment[]
  issueComments       IssueComment[]
}

model TimeEntry {
  id         String   @id @default(cuid())
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  timeIn     DateTime
  timeOut    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  commits    Commit[]
}

model Commit {
  id           String    @id @default(cuid())
  employeeId   String
  employee     Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  commitHash   String
  message      String
  branch       String
  repo         String
  timeEntryId  String
  timeEntry    TimeEntry @relation(fields: [timeEntryId], references: [id], onDelete: Cascade)
  linesAdded   Int
  linesRemoved Int
}

model PullRequest {
  id        String               @id @default(cuid())
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  title     String
  url       String
  repo      String
  branch    String
  comments  PullRequestComment[]
}

model PullRequestComment {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  comment       String
  pullRequestId String
  pullRequest   PullRequest @relation(fields: [pullRequestId], references: [id], onDelete: Cascade)
  employeeId    String
  employee      Employee    @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}

model Issue {
  id        String         @id @default(cuid())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  title     String
  url       String
  repo      String
  comments  IssueComment[]
}

model IssueComment {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  comment    String
  issueId    String
  issue      Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}
